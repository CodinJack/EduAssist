from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .utils import generate_notes
import os
from django.views.decorators.http import require_GET
import requests

@require_GET
@csrf_exempt
def search_youtube_videos(request):
    try:
        query = request.GET.get("q")
        if not query:
            return JsonResponse({"error": "Search query is required"}, status=400)
        
        # Add 'educational' to ensure better context
        safe_query = f"{query} educational"

        api_key = os.getenv("YOUTUBE_API_KEY")
        if not api_key:
            return JsonResponse({"error": "YouTube API key not configured"}, status=500)

        url = (
            "https://www.googleapis.com/youtube/v3/search"
            f"?part=snippet&maxResults=15&q={safe_query}&type=video&videoEmbeddable=true&key={api_key}"
        )

        youtube_response = requests.get(url)
        if youtube_response.status_code != 200:
            return JsonResponse({
                "error": f"YouTube API error: {youtube_response.json().get('error', {}).get('message', 'Unknown error')}"
            }, status=500)

        data = youtube_response.json()
        return JsonResponse(data, safe=False)
    
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

@csrf_exempt
def create_notes(request):
    """Create notes generated by AI"""
    if request.method != "POST":
        return JsonResponse({"error": "Only POST method is supported"}, status=405)

    try:
        request_body = request.body.decode('utf-8')
        print(f"Raw request body: {request_body[:200]}")  # Debug first 200 chars

        if not request_body.strip():
            return JsonResponse({"error": "Empty request body"}, status=400)

        # Parse JSON data
        try:
            data = json.loads(request_body)
        except json.JSONDecodeError as e:
            print(f"JSON parsing error: {e}")
            return JsonResponse({"error": f"Invalid JSON in request: {str(e)}"}, status=400)

        print(f"Parsed request data: {data}")

        # Extract required fields
        topic = data.get("topic")
        userId = data.get("userId")

        # Validate required fields
        if not topic:
            return JsonResponse({"error": "Topic is required"}, status=400)

        # Generate notes
        notes = generate_notes(topic)

        # Validate notes
        if not notes or len(notes.strip()) == 0:
            return JsonResponse({"error": "Failed to generate notes"}, status=500)

        # Return the generated notes to the frontend
        notes_data = {
            "userId": userId,
            "topic": topic,
            "notes": notes
        }

        return JsonResponse({
            "data": notes_data,
            "message": "Notes generated successfully"
        }, status=200)

    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return JsonResponse({"error": f"Unexpected server error: {str(e)}"}, status=500)
